body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    color: #333;
    margin: 0;
    padding: 0;
    transition: background 0.3s ease, color 0.3s ease;
}

.dark {
    background-color: #222;
    color: #fff;
}

.container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    text-align: center;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
}

#search {
    padding: 5px;
    font-size: 16px;
}

#live-prices {
    margin: 20px 0;
}

.coin {
    padding: 10px;
    margin: 5px 0;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.dark .coin {
    background: #444;
}
body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    color: #333;
    margin: 0;
    padding: 0;
    transition: background 0.3s ease, color 0.3s ease;
}

.dark {
    background-color: #222;
    color: #fff;
}

.container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    text-align: center;
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
}

#search {
    padding: 5px;
    font-size: 16px;
}

#live-prices {
    margin: 20px 0;
}

.coin {
    padding: 10px;
    margin: 5px 0;
    background: #fff;
    border-radius: 5px;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
}

.dark .coin {
    background: #444;
}
document.addEventListener("DOMContentLoaded", () => {
    const themeToggle = document.getElementById("theme-toggle");
    const body = document.body;
    const searchInput = document.getElementById("search");
    const updateTime = document.getElementById("update-time");
    const livePrices = document.getElementById("live-prices");
    const predictionChartCanvas = document.getElementById("prediction-chart").getContext("2d");
    let predictionChart;

    // Load Theme Preference
    if (localStorage.getItem("darkMode") === "enabled") {
        body.classList.add("dark");
    }

    themeToggle.addEventListener("click", () => {
        body.classList.toggle("dark");
        localStorage.setItem("darkMode", body.classList.contains("dark") ? "enabled" : "disabled");
    });

    function fetchCryptoData() {
        fetch("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd")
            .then(response => response.json())
            .then(data => {
                livePrices.innerHTML = "";
                data.forEach(coin => {
                    const coinElement = document.createElement("div");
                    coinElement.className = "coin";
                    coinElement.innerHTML = `<strong>${coin.name}</strong>: $${coin.current_price}`;
                    coinElement.addEventListener("click", () => predictPrice(coin.id));
                    livePrices.appendChild(coinElement);
                });
                updateTime.textContent = new Date().toLocaleTimeString();
            });
    }

    function predictPrice(coinId) {
        fetch(`https://api.coingecko.com/api/v3/coins/${coinId}/market_chart?vs_currency=usd&days=7`)
            .then(response => response.json())
            .then(data => {
                const prices = data.prices.map(price => price[1]);
                const timestamps = data.prices.map(price => new Date(price[0]).toLocaleDateString());

                // Simple Linear Regression Prediction (Placeholder)
                const futurePrices = prices.map((p, i) => p * (1 + 0.01 * i));
                timestamps.push("Future");
                futurePrices.push(futurePrices[futurePrices.length - 1] * 1.02);

                updatePredictionChart(timestamps, prices, futurePrices);
            });
    }

    function updatePredictionChart(labels, actualData, predictedData) {
        if (predictionChart) {
            predictionChart.destroy();
        }
        predictionChart = new Chart(predictionChartCanvas, {
            type: "line",
            data: {
                labels: labels,
                datasets: [
                    {
                        label: "Actual Prices",
                        data: actualData,
                        borderColor: "blue",
                        fill: false,
                    },
                    {
                        label: "Predicted Prices",
                        data: predictedData,
                        borderColor: "red",
                        fill: false,
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false
            }
        });
    }

    setInterval(fetchCryptoData, 10000);
    fetchCryptoData();
});
